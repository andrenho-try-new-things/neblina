#
# objects
#

OBJ=	main.o				\
	arguments.o			\
	orchestrator/orchestrator.o	\
	service/scheduled_service.o	\
	util/embed/embedded.o		\
	contrib/simdjson/simdjson.o

AUTOGENERATED_FILES=

#
# config
#

JSON2CPP = ../tools/json2cpp/json2cpp.py

#
# flags
#

CPPFLAGS=-Wall -MMD -I. -isystem contrib/simdjson
CXXFLAGS=-std=c++23
LDFLAGS=-lz -flto=auto

ifdef DEV
  CPPFLAGS += -O0 -ggdb
else ifdef PEDANTIC
  CPPFLAGS += -O0 -ggdb -fstack-protector-strong -fno-common -Wextra -Wpedantic -Wshadow -Wformat=2
  CXXFLAGS += -Weffc++ -Wnull-dereference -Wcast-align
  ifeq ($(CC),g++)
    CXXFLAGS += -fanalyzer -Wlogical-op -Wduplicated-cond -Wduplicated-branches
  endif
else
  CPPFLAGS += -O3 -ffast-math -march=native -flto -D_FORTIFY_SOURCE=2 -fstack-protector-strong -fno-common
endif

UNAME_S := $(shell uname -s)
ifeq ($(UNAME_S),Darwin)
  STAT_PRM="-f %z"
else
  STAT_PRM="-c %s"
endif

#
# macros
#

# parameters: schema_file, output_dir, output_filename (no extension), dependency file, class_name
define json2cpp-macro
$(4): $(2)/$(3).o

$(2)/$(3).o: $(2)/$(3).cc

$(2)/$(3).cc: $(1)
	$(JSON2CPP) $$^ $(5) $(2)

AUTOGENERATED_FILES += $(2)/$(3).cc $(2)/$(3).hh
OBJ += $(2)/$(3).o
endef

json2cpp = $(eval $(call json2cpp-macro,$(1),$(2),$(3),$(4),$(5)))

#
# autogenerated files
#

$(call json2cpp,orchestrator/orchestratorSchema.json,orchestrator,orchestrator_config,orchestrator/orchestrator.o main.o,OrchestratorConfig)

#
# rules
#

all: neblina

watchdog/watchdog.o: watchdog/watchdog.gen.inc

contrib/simdjson/simdjson.o: contrib/simdjson/simdjson.cpp
	g++ -c -I. -O3 -ffast-math -march=native -flto -o $@ $^     # compile without warnings or deep checks

%.gen.inc: %.json
	echo "#include <stdint.h>" > $@ && \
	echo "#include <stddef.h>" >> $@ && \
	echo "static const uint8_t $(basename $(notdir $^))[] = {" >> $@ && \
	cat $^ | gzip | xxd -i >> $@ && \
	echo "};" >> $@
	echo "static size_t $(basename $(notdir $^))_uncompressed_sz = $(shell stat ${STAT_PRM} $^);" >> $@

pedantic:
	$(MAKE) all PEDANTIC=1

dev:
	$(MAKE) all DEV=1

neblina: $(OBJ)
	g++ -o $@ $^ $(LDFLAGS)

clean:
	rm -rf $(OBJ) $(OBJ:.o=.d) neblina **/*.gen.inc *.gen.inc ${AUTOGENERATED_FILES}

-include $(OBJ:.o=.d)

# vim:sts=8:ts=8:sw=8:expandtab
